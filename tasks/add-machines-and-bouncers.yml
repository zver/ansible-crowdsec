---
- name: Start docker container for use cscli in docker
  service:
    name: crowdsec-docker
    state: restarted
  when:
    - cs_install_type == 'docker'

- name: Wait for docker container
  command: docker exec crowdsec true
  changed_when: false
  register: cmd_output
  until: cmd_output.rc == 0
  retries: 10
  delay: 5
  when:
    - cs_install_type == 'docker'

- name: Find agent hosts in ansible
  set_fact:
    cs_agent_hosts: "{{ cs_agent_hosts | default([]) + [item] }}"
  loop: "{{ groups['all'] }}"
  when: hostvars[item].cs_lapi_agent | default(false) | bool

- name: Show agent hosts
  debug:
    var: cs_agent_hosts

- name: Crowdsec - cscli machines add cs_agents on server
  command:
    cmd: "{{ cs_exec_insert }}cscli machines add {{ item }} -p {{ (item + cs_agent_secret) | hash('sha256') | truncate(32, end='') }} -u http://{{ cs_lapi_ip }}:{{ cs_lapi_port }} --force"
  loop: "{{ cs_agent_hosts }}"
  when:
    - cs_lapi_server
    - cs_agent_hosts|length > 0

- name: Find bouncer hosts in ansible
  set_fact:
    cs_bouncer_hosts: "{{ bouncer_hosts | default([]) + [item] }}"
  loop: "{{ groups['all'] }}"
  when: hostvars[item].cs_firewall_bouncer | default(false) | bool

- name: Show bouncer hosts
  debug:
    var: cs_bouncer_hosts

- name: Delete Crowdsec bouncers
  command:
    cmd: "{{ cs_exec_insert }}cscli bouncers delete {{ item }}"
  loop: "{{ cs_bouncer_hosts }}"
  register: cscli_command
  ignore_errors: true
  when:
    - cs_lapi_server
    - cs_bouncer_hosts|length > 0

- name: Add Crowdsec bouncers
  command:
    cmd: "{{ cs_exec_insert }}cscli bouncers add {{ item }} -k {{ (item + cs_bouncer_secret) | hash('sha256') | truncate(32, end='') }}"
  loop: "{{ cs_bouncer_hosts }}"
  register: cscli_command
  when:
    - cs_lapi_server
    - cs_bouncer_hosts|length > 0
  failed_when: >
    cscli_command.rc != 0 and
    'unable to create bouncer: bouncer' not in cscli_command.stderr and
    'already exists' not in cscli_command.stderr
